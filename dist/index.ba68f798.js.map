{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-f56cac521b8c1f91.js","node_modules/@parcel/runtime-js/lib/runtime-1891c733b1a1b1e7.js","app.js","config.js","markup.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"jRPZQ\\\":\\\"index.ba68f798.js\\\",\\\"d4CMP\\\":\\\"icon-location.c6b5a81e.svg\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"d4CMP\")).toString();","import * as config from \"/config.js\";\r\nimport * as render from \"/markup.js\";\r\nimport iconLocation from \"url:/images/icon-location.svg\";\r\n\r\nclass App {\r\n  #map = L.map(\"map\").setView([0, 0], 0);\r\n  #form = document.querySelector(\".main-form\");\r\n  #parentInfoContainer = document.querySelector(\".address-info-container\");\r\n  #parentErrorContainer = document.querySelector(\".error-message-container\");\r\n  #infoContainer = document.querySelector(\".info-container\");\r\n  #errorMessage = document.querySelector(\".error-message\");\r\n\r\n  constructor() {\r\n    this._load_map(this.#map);\r\n    this._load_location_data();\r\n    this._init_form_handler();\r\n  }\r\n\r\n  _load_map(map) {\r\n    L.tileLayer(\"http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\", {\r\n      maxZoom: 20,\r\n      subdomains: [\"mt0\", \"mt1\", \"mt2\", \"mt3\"],\r\n    }).addTo(map);\r\n  }\r\n\r\n  _load_location_map(map, { lat, lng } = { lat: 51.5, lng: 10.09 }, routeIP) {\r\n    map.setView([lat, lng], config.MAP_ZOOM);\r\n    L.marker([lat, lng], {\r\n      icon: L.icon({\r\n        iconUrl: iconLocation,\r\n        iconSize: [35, 40],\r\n      }),\r\n    })\r\n      .addTo(map)\r\n      .bindPopup(\r\n        L.popup({\r\n          offset: [0, -15],\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        })\r\n      )\r\n      .setPopupContent(`route (${routeIP}) located here `)\r\n      .openPopup();\r\n  }\r\n\r\n  _display_error_message(message) {\r\n    this.#parentInfoContainer.classList.remove(\"active\");\r\n    this.#parentErrorContainer.classList.add(\"active\");\r\n    this.#errorMessage.textContent = message;\r\n  }\r\n\r\n  _clear() {\r\n    this.#infoContainer.innerHTML = \"\";\r\n  }\r\n\r\n  async _get_my_IP() {\r\n    try {\r\n      const response = await fetch(config.GET_IP);\r\n\r\n      if (!response.ok)\r\n        throw new Error(`can't get your IP Address (${response.status})`);\r\n\r\n      const { ip: IP } = await response.json();\r\n      document.getElementById(\"address-input\").value = IP;\r\n      return IP;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _get_res_data(address) {\r\n    try {\r\n      const IP = address ?? (await this._get_my_IP());\r\n      const response = await fetch(config.IP_COUNTRY_CITY(IP));\r\n\r\n      if (!response.ok)\r\n        throw new Error(`${response.statusText} (${response.status})`);\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _get_route_location(address) {\r\n    try {\r\n      const data = await this._get_res_data(address);\r\n      const makeCorrectCase = data.as.route.split(/[./]/);\r\n      const routeIP = makeCorrectCase.slice(0, 4).join(\".\");\r\n      return routeIP;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async _load_location_data(address) {\r\n    try {\r\n      const exact_IP = await this._get_route_location(address);\r\n      const data = await this._get_res_data(exact_IP);\r\n\r\n      this._load_location_map(\r\n        this.#map,\r\n        {\r\n          lat: data.location.lat,\r\n          lng: data.location.lng,\r\n        },\r\n        exact_IP\r\n      );\r\n\r\n      this._clear();\r\n      this.#parentInfoContainer.classList.add(\"active\");\r\n      this.#infoContainer.insertAdjacentHTML(\r\n        \"beforeend\",\r\n        render.renderInfo(data)\r\n      );\r\n    } catch (error) {\r\n      this._display_error_message(error.message);\r\n    }\r\n  }\r\n\r\n  _init_form_handler() {\r\n    this.#form.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      const userInput = document.getElementById(\"address-input\").value;\r\n\r\n      // validating if IP address case is really correct\r\n      if (!(userInput.split(\".\").filter((el) => +el).length === 4)) {\r\n        this._display_error_message(\r\n          \"Make sure your input value is an IP Address not domain\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // if ever previous error exist\r\n      this.#parentErrorContainer.classList.remove(\"active\");\r\n\r\n      this._load_location_data(userInput);\r\n    });\r\n  }\r\n}\r\n\r\nconst app = new App();\r\n","const GET_IP = \"https://api.ipify.org?format=json\";\r\n\r\nconst IP_COUNTRY_CITY = (IP) => {\r\n  return `https://geo.ipify.org/api/v2/country,city?apiKey=at_M8T0QaTcLNBS3u4PQZwHGam7ZvNJ4&ipAddress=${IP}`;\r\n};\r\n\r\nconst MAP_ZOOM = 12;\r\n\r\nexport { IP_COUNTRY_CITY, GET_IP, MAP_ZOOM };\r\n","const renderInfo = function (data) {\r\n  return `\r\n <div class=\"content\">\r\n              <p class=\"title\">IP ADDRESS</p>\r\n              <h2 class=\"title-content\">${data.ip}</h2>\r\n            </div>\r\n            <div class=\"content\">\r\n              <p class=\"title\">LOCATION</p>\r\n              <h2 class=\"title-content\">${data.location.city}, ${data.location.region}, ${data.location.postalCode}</h2>\r\n            </div>\r\n            <div class=\"content\">\r\n              <p class=\"title\">TIMEZONE</p>\r\n              <h2 class=\"title-content\">UTC${data.location.timezone}</h2>\r\n            </div>\r\n            <div class=\"content\">\r\n              <p class=\"title\">ISP</p>\r\n              <h2 class=\"title-content\">${data.isp}</h2>\r\n            </div>\r\n    `;\r\n};\r\n\r\nexport { renderInfo };\r\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$6f284dc3ff311760$exports","URL","resolve","import","meta","url","toString","map","L","setView","form","document","querySelector","parentInfoContainer","parentErrorContainer","infoContainer","errorMessage","constructor","this","_load_map","_load_location_data","_init_form_handler","tileLayer","maxZoom","subdomains","addTo","_load_location_map","lat","lng","routeIP","marker","icon","iconUrl","$parcel$interopDefault","iconSize","bindPopup","popup","offset","autoClose","closeOnClick","setPopupContent","openPopup","_display_error_message","message","classList","remove","add","textContent","_clear","innerHTML","async","response","fetch","ok","status","ip","IP","json","getElementById","value","error","address","_get_my_IP","$c10fc4dd470a6ad9$export$467bd201150db086","statusText","makeCorrectCase","_get_res_data","as","route","split","slice","join","exact_IP","_get_route_location","data","location","insertAdjacentHTML","$b209cf9df5f631c1$export$751a7c2349f9bdd6","addEventListener","e","preventDefault","userInput","filter","el"],"version":3,"file":"index.ba68f798.js.map"}